// Generated by gencpp from file autolabor_canbus_driver/CanBusServiceRequest.msg
// DO NOT EDIT!


#ifndef AUTOLABOR_CANBUS_DRIVER_MESSAGE_CANBUSSERVICEREQUEST_H
#define AUTOLABOR_CANBUS_DRIVER_MESSAGE_CANBUSSERVICEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <autolabor_canbus_driver/CanBusMessage.h>

namespace autolabor_canbus_driver
{
template <class ContainerAllocator>
struct CanBusServiceRequest_
{
  typedef CanBusServiceRequest_<ContainerAllocator> Type;

  CanBusServiceRequest_()
    : requests()  {
    }
  CanBusServiceRequest_(const ContainerAllocator& _alloc)
    : requests(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator> >::other >  _requests_type;
  _requests_type requests;





  typedef boost::shared_ptr< ::autolabor_canbus_driver::CanBusServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autolabor_canbus_driver::CanBusServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CanBusServiceRequest_

typedef ::autolabor_canbus_driver::CanBusServiceRequest_<std::allocator<void> > CanBusServiceRequest;

typedef boost::shared_ptr< ::autolabor_canbus_driver::CanBusServiceRequest > CanBusServiceRequestPtr;
typedef boost::shared_ptr< ::autolabor_canbus_driver::CanBusServiceRequest const> CanBusServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autolabor_canbus_driver::CanBusServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autolabor_canbus_driver::CanBusServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace autolabor_canbus_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'autolabor_canbus_driver': ['/home/ntut-mit/catkin_ws/src/autolabor/src/driver/car/autolabor_canbus_driver/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::autolabor_canbus_driver::CanBusServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autolabor_canbus_driver::CanBusServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autolabor_canbus_driver::CanBusServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autolabor_canbus_driver::CanBusServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autolabor_canbus_driver::CanBusServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autolabor_canbus_driver::CanBusServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autolabor_canbus_driver::CanBusServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9a9cc9390520695f9967803f5179d063";
  }

  static const char* value(const ::autolabor_canbus_driver::CanBusServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9a9cc9390520695fULL;
  static const uint64_t static_value2 = 0x9967803f5179d063ULL;
};

template<class ContainerAllocator>
struct DataType< ::autolabor_canbus_driver::CanBusServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autolabor_canbus_driver/CanBusServiceRequest";
  }

  static const char* value(const ::autolabor_canbus_driver::CanBusServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autolabor_canbus_driver::CanBusServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autolabor_canbus_driver/CanBusMessage[] requests\n"
"\n"
"================================================================================\n"
"MSG: autolabor_canbus_driver/CanBusMessage\n"
"uint8 node_type\n"
"uint8 node_seq\n"
"uint8 msg_type\n"
"uint8[] payload\n"
;
  }

  static const char* value(const ::autolabor_canbus_driver::CanBusServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autolabor_canbus_driver::CanBusServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.requests);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CanBusServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autolabor_canbus_driver::CanBusServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autolabor_canbus_driver::CanBusServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "requests[]" << std::endl;
    for (size_t i = 0; i < v.requests.size(); ++i)
    {
      s << indent << "  requests[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator> >::stream(s, indent + "    ", v.requests[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOLABOR_CANBUS_DRIVER_MESSAGE_CANBUSSERVICEREQUEST_H
